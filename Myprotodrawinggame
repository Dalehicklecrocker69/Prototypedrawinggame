<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Draw & Guess Challenge</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: white;
        }
        
        .container {
            background: rgba(0, 15, 46, 0.85);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            width: 100%;
            max-width: 1000px;
            overflow: hidden;
            padding: 20px;
        }
        
        header {
            text-align: center;
            padding: 20px 0;
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            background: linear-gradient(to right, #ff9966, #ff5e62);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 20px;
        }
        
        .game-area {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            padding: 20px 0;
        }
        
        .drawing-section {
            background: rgba(0, 30, 60, 0.7);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        
        .canvas-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            flex-grow: 1;
            position: relative;
        }
        
        canvas {
            background: white;
            cursor: crosshair;
            display: block;
        }
        
        .tools {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        
        .tool-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 8px 15px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .tool-btn:hover, .tool-btn.active {
            background: #4a9bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .color-picker {
            display: flex;
            gap: 5px;
            align-items: center;
            margin: 10px 0;
        }
        
        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s ease;
        }
        
        .color-option:hover, .color-option.active {
            transform: scale(1.2);
            border-color: white;
        }
        
        .chat-section {
            background: rgba(0, 30, 60, 0.7);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        
        .player-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            background: rgba(0, 50, 100, 0.5);
            padding: 15px;
            border-radius: 10px;
        }
        
        .timer {
            font-size: 2.2rem;
            font-weight: 700;
            text-align: center;
            background: linear-gradient(to right, #ff9966, #ff5e62);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            padding: 10px;
            border-radius: 10px;
        }
        
        .drawer {
            text-align: center;
            padding: 10px;
            background: rgba(255, 215, 0, 0.2);
            border-radius: 10px;
            font-weight: bold;
            color: #FFD700;
        }
        
        .word-display {
            text-align: center;
            font-size: 1.8rem;
            letter-spacing: 3px;
            margin: 15px 0;
            padding: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            font-weight: bold;
            text-transform: uppercase;
            color: #4a9bff;
        }
        
        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            max-height: 300px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            animation: fadeIn 0.3s ease;
        }
        
        .message.guess {
            background: rgba(74, 155, 255, 0.2);
            border-left: 3px solid #4a9bff;
        }
        
        .message.correct {
            background: rgba(46, 204, 113, 0.2);
            border-left: 3px solid #2ecc71;
        }
        
        .player-name {
            font-weight: bold;
            margin-right: 5px;
        }
        
        .guess-input {
            display: flex;
            gap: 10px;
        }
        
        input {
            flex-grow: 1;
            padding: 12px 15px;
            border: none;
            border-radius: 50px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }
        
        input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        
        button {
            padding: 12px 25px;
            border: none;
            border-radius: 50px;
            background: linear-gradient(to right, #ff9966, #ff5e62);
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .players {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 20px;
        }
        
        .player {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .player.drawer {
            background: rgba(255, 215, 0, 0.2);
            transform: scale(1.05);
        }
        
        .player.correct {
            background: rgba(46, 204, 113, 0.2);
        }
        
        .player-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .player-score {
            font-size: 1.2rem;
            color: #4a9bff;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 1s infinite;
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            border-radius: 20px;
        }
        
        .game-over h2 {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #ff5e62;
        }
        
        .restart-btn {
            font-size: 1.2rem;
            padding: 15px 40px;
        }
        
        @media (max-width: 768px) {
            .game-area {
                grid-template-columns: 1fr;
            }
            
            .players {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Draw & Guess Challenge</h1>
            <p class="subtitle">One player draws, others guess what it is in 90 seconds!</p>
        </header>
        
        <div class="game-area">
            <div class="drawing-section">
                <div class="canvas-container">
                    <canvas id="drawingCanvas" width="600" height="400"></canvas>
                </div>
                
                <div class="tools">
                    <button id="pencil" class="tool-btn active">‚úèÔ∏è Pencil</button>
                    <button id="eraser" class="tool-btn">üßΩ Eraser</button>
                    <button id="clear" class="tool-btn">üóëÔ∏è Clear</button>
                </div>
                
                <div class="color-picker">
                    <div class="color-option active" style="background-color: black;" data-color="black"></div>
                    <div class="color-option" style="background-color: #ff5e62;" data-color="#ff5e62"></div>
                    <div class="color-option" style="background-color: #4a9bff;" data-color="#4a9bff"></div>
                    <div class="color-option" style="background-color: #2ecc71;" data-color="#2ecc71"></div>
                    <div class="color-option" style="background-color: #ff9966;" data-color="#ff9966"></div>
                    <div class="color-option" style="background-color: #9b59b6;" data-color="#9b59b6"></div>
                </div>
            </div>
            
            <div class="chat-section">
                <div class="player-info">
                    <div class="drawer">üé® You're drawing!</div>
                    <div class="timer" id="timer">1:30</div>
                </div>
                
                <div class="word-display" id="wordDisplay">CAT</div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="message">Game started! Alex is drawing something...</div>
                    <div class="message guess"><span class="player-name">Jamie:</span> Is it a dog?</div>
                    <div class="message guess"><span class="player-name">Taylor:</span> Maybe a car?</div>
                    <div class="message correct"><span class="player-name">Jordan:</span> It's a cat! üò∫</div>
                </div>
                
                <div class="guess-input">
                    <input type="text" id="guessInput" placeholder="Type your guess here...">
                    <button id="submitGuess">Guess</button>
                </div>
                
                <div class="players">
                    <div class="player drawer">
                        <div class="player-name">Alex (You)</div>
                        <div class="player-score">üé® 250 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Jamie</div>
                        <div class="player-score">‚≠ê 180 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Taylor</div>
                        <div class="player-score">‚≠ê 150 pts</div>
                    </div>
                    <div class="player correct">
                        <div class="player-name">Jordan</div>
                        <div class="player-score">üèÜ 220 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Casey</div>
                        <div class="player-score">‚≠ê 120 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Riley</div>
                        <div class="player-score">‚≠ê 90 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Morgan</div>
                        <div class="player-score">‚≠ê 75 pts</div>
                    </div>
                    <div class="player">
                        <div class="player-name">Quinn</div>
                        <div class="player-score">‚≠ê 60 pts</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Canvas setup
        const canvas = document.getElementById('drawingCanvas');
        const ctx = canvas.getContext('2d');
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let currentTool = 'pencil';
        let currentColor = 'black';
        let lineWidth = 3;
        
        // Set canvas background to white
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Initialize drawing
        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }
        
        function draw(e) {
            if (!isDrawing) return;
            
            ctx.strokeStyle = currentTool === 'eraser' ? 'white' : currentColor;
            ctx.lineWidth = currentTool === 'eraser' ? 20 : lineWidth;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.stroke();
            
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }
        
        function stopDrawing() {
            isDrawing = false;
        }
        
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        
        // Tool selection
        document.getElementById('pencil').addEventListener('click', () => {
            currentTool = 'pencil';
            updateToolButtons('pencil');
        });
        
        document.getElementById('eraser').addEventListener('click', () => {
            currentTool = 'eraser';
            updateToolButtons('eraser');
        });
        
        document.getElementById('clear').addEventListener('click', () => {
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        });
        
        function updateToolButtons(activeTool) {
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.getElementById(activeTool).classList.add('active');
        }
        
        // Color selection
        document.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.color-option').forEach(opt => {
                    opt.classList.remove('active');
                });
                option.classList.add('active');
                currentColor = option.getAttribute('data-color');
            });
        });
        
        // Game logic
        const timerDisplay = document.getElementById('timer');
        const wordDisplay = document.getElementById('wordDisplay');
        const chatMessages = document.getElementById('chatMessages');
        const guessInput = document.getElementById('guessInput');
        const submitBtn = document.getElementById('submitGuess');
        
        let timeLeft = 90; // 1 minute 30 seconds
        let timerInterval;
        const words = ["CAT", "DOG", "HOUSE", "SUN", "TREE", "CAR", "BICYCLE", "FLOWER", "BOOK", "MOUNTAIN", "STAR", "CAKE", "APPLE", "CLOUD", "HEART"];
        let currentWord = "CAT";
        
        // Start the game
        function startGame() {
            // Reset timer
            timeLeft = 90;
            updateTimerDisplay();
            
            // Clear chat messages
            chatMessages.innerHTML = '<div class="message">Game started! Alex is drawing something...</div>';
            
            // Select a random word
            currentWord = words[Math.floor(Math.random() * words.length)];
            wordDisplay.textContent = currentWord;
            
            // Clear canvas
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Start timer
            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    endGame();
                }
                
                // Simulate other players guessing
                if (timeLeft % 7 === 0 && timeLeft > 10) {
                    simulateGuess();
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            
            if (timeLeft < 10) {
                timerDisplay.classList.add('pulse');
            } else {
                timerDisplay.classList.remove('pulse');
            }
        }
        
        function simulateGuess() {
            const players = ["Jamie", "Taylor", "Jordan", "Casey", "Riley", "Morgan", "Quinn"];
            const player = players[Math.floor(Math.random() * players.length)];
            
            // Create a message that might be correct or incorrect
            let message;
            if (Math.random() > 0.7 && timeLeft < 45) {
                // Correct guess
                message = `<div class="message correct"><span class="player-name">${player}:</span> It's a ${currentWord.toLowerCase()}! ${getEmoji()}</div>`;
                
                // Update player display
                document.querySelectorAll('.player-name').forEach(el => {
                    if (el.textContent.includes(player)) {
                        el.closest('.player').classList.add('correct');
                    }
                });
            } else {
                // Incorrect guess
                const wrongWords = words.filter(word => word !== currentWord);
                const wrongWord = wrongWords[Math.floor(Math.random() * wrongWords.length)].toLowerCase();
                message = `<div class="message guess"><span class="player-name">${player}:</span> Is it a ${wrongWord}?</div>`;
            }
            
            chatMessages.innerHTML += message;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function getEmoji() {
            const emojis = ["üò∫", "üê∂", "üè†", "‚òÄÔ∏è", "üå≥", "üöó", "üö≤", "üå∏", "üìö", "‚õ∞Ô∏è", "‚≠ê", "üéÇ", "üçé", "‚òÅÔ∏è", "‚ù§Ô∏è"];
            return emojis[Math.floor(Math.random() * emojis.length)];
        }
        
        function endGame() {
            chatMessages.innerHTML += `<div class="message">‚è∞ Time's up! The word was "${currentWord}"</div>`;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Handle player guess
        submitBtn.addEventListener('click', submitGuess);
        guessInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') submitGuess();
        });
        
        function submitGuess() {
            const guess = guessInput.value.trim().toUpperCase();
            if (!guess) return;
            
            // Add player guess to chat
            const message = document.createElement('div');
            message.className = 'message guess';
            message.innerHTML = `<span class="player-name">You:</span> ${guessInput.value}`;
            chatMessages.appendChild(message);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Check if correct
            if (guess === currentWord) {
                const correctMessage = document.createElement('div');
                correctMessage.className = 'message correct';
                correctMessage.innerHTML = `<span class="player-name">System:</span> You guessed it! It's a ${currentWord.toLowerCase()}! üéâ`;
                chatMessages.appendChild(correctMessage);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Highlight player
                document.querySelector('.player.drawer').nextElementSibling.classList.add('correct');
            }
            
            // Clear input
            guessInput.value = '';
        }
        
        // Start the game when page loads
        window.addEventListener('load', startGame);
    </script>
</body>
</html>
